ext {
  componentName='Interlok Core/JMX Client'
  componentDesc="JMX implementation of the Interlok Client API"
  delombokTargetDir = new File("${project.projectDir}/src/main/generated")
  log4j2Version = "2.24.1"
  mockitoVersion = '4.9.0'
}

dependencies {
  api project(':interlok-common')
  api project(':interlok-client')
  api ("org.slf4j:slf4j-api:2.0.16")

  testImplementation ("org.junit.jupiter:junit-jupiter-api:5.11.0")
  testImplementation ("org.junit.jupiter:junit-jupiter-engine:5.11.0")
  testImplementation ("org.apache.logging.log4j:log4j-core:$log4j2Version")
  testImplementation ("org.apache.logging.log4j:log4j-1.2-api:$log4j2Version")
  testImplementation ("org.apache.logging.log4j:log4j-api:$log4j2Version")
  testImplementation ("org.mockito:mockito-core:$mockitoVersion")
  testImplementation ("org.mockito:mockito-inline:$mockitoVersion")
  testImplementation ("org.glassfish.external:opendmk_jmxremote_optional_jar:1.0-b01-ea")
  testImplementation ("org.glassfish.external:opendmk_jdmkrt_jar:1.0-b01-ea")

  annotationProcessor project(':interlok-core-apt')
  testAnnotationProcessor project(':interlok-core-apt')

  javadoc project(':interlok-core-apt')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task deleteGeneratedFiles(type: Delete) {
  delete delombokTargetDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

delombok {
  target = delombokTargetDir
}

javadoc {
  configure(options) {
    taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
    options.addStringOption "Xdoclint:none", "-quiet"
    options.addStringOption "tagletpath", configurations.javadoc.asPath
    options.tags('apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:','implNote:a:Implementation Note:')
    title= componentName
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }
      artifact sourcesJar { classifier "sources" }

      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", componentDesc)
        asNode().appendNode("url", "https://interlok.adaptris.net/interlok-docs/#/")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.0.5+")
        properties.appendNode("license", "false")
        properties.appendNode("tags", "jmx")
        properties.appendNode("readme", "https://github.com/adaptris/interlok/raw/develop/README.md")
        properties.appendNode("repository", "https://github.com/adaptris/interlok")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

clean.dependsOn deleteGeneratedFiles
