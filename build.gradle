plugins {
  // Manage optional dependencies in maven pom.
  id 'nebula.optional-base' version '5.0.3' apply false
  id 'com.github.spotbugs' version '4.2.0' apply false
  id "org.sonarqube" version '2.8' apply false
  id 'org.owasp.dependencycheck' version '5.3.2.1' apply false
}

ext {
  interlokCoreVersion = project.hasProperty('interlokCoreVersion') ? project.getProperty('interlokCoreVersion') : '3.10-SNAPSHOT'
  releaseVersion = project.hasProperty('releaseVersion') ? project.getProperty('releaseVersion') : '3.10-SNAPSHOT'
  nexusBaseUrl = project.hasProperty('nexusBaseUrl') ? project.getProperty('nexusBaseUrl') : 'https://nexus.adaptris.net/nexus'
  mavenPublishUrl = project.hasProperty('mavenPublishUrl') ? project.getProperty('mavenPublishUrl') : nexusBaseUrl + '/content/repositories/snapshots'
  javadocsBaseUrl = nexusBaseUrl + "/content/sites/javadocs/com/adaptris"
  repoUsername = project.hasProperty('repoUsername') ? project.getProperty('repoUsername') : 'unknown'
  repoPassword = project.hasProperty('repoPassword') ? project.getProperty('repoPassword') : 'unknown'
  defaultNexusRepo = project.hasProperty('defaultNexusRepo') ? project.getProperty('defaultNexusRepo') : 'https://repo1.maven.org/maven2/'

  interlokJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : javadocsBaseUrl + "/interlok-core/" + interlokCoreVersion
  interlokCommonJavadocs= project.hasProperty('interlokCommonJavadocs') ? project.getProperty('interlokCommonJavadocs') : javadocsBaseUrl + "/interlok-common/" + interlokCoreVersion
  componentName='Interlok'
  organizationName = "Adaptris Ltd"
  organizationUrl = "http://interlok.adaptris.net"
  slf4jVersion = '1.7.30'
  log4j2Version = "2.13.2"
  xstreamVersion = '1.4.12'
  mockitoVersion = '3.3.3'
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

ext.jacocoEnabled = { subproject ->
  return !subproject.name.equals("interlok-core-apt")
}


ext.gitBranchNameOrTimestamp = { branchName ->
  if (branchName.equals("HEAD") || branchName.equals("develop") || branchName.startsWith("release")) {
    return new Date().format('HH:mm:ss z');
  }
  return branchName;
}

ext.buildInfo = { ->
   new ByteArrayOutputStream().withStream { os ->
      exec {
        executable = "git"
        args = ["rev-parse", "--abbrev-ref", "HEAD"]
        standardOutput = os
      }
      def branchName = os.toString().replaceAll("\r", "").replaceAll("\n", "").trim();
      return gitBranchNameOrTimestamp(branchName);
    }
}

task clean(type: Delete) {
  delete project.buildDir
}

subprojects { subproject ->
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'maven-publish'
  apply plugin: 'nebula.optional-base'
  apply plugin: 'com.github.spotbugs'
  apply plugin: 'org.sonarqube'
  apply plugin: 'org.owasp.dependencycheck'
  if (jacocoEnabled(subproject)) {
    apply plugin: "jacoco"
  }

  sourceCompatibility = 1.8
  group   = 'com.adaptris'
  version = releaseVersion
  def versionDir = "$buildDir/version"

  // In this section you declare where to find the dependencies of your project
  repositories {
    mavenCentral()
    maven { url "$defaultNexusRepo" }
    maven { url "$nexusBaseUrl/content/groups/public" }
    maven { url "$nexusBaseUrl/content/groups/interlok" }
  }

  configurations {
    javadoc {}
    mavenDeploy{}
    all*.exclude group: 'c3p0'
    all*.exclude group: 'commons-logging'
    all*.exclude group: 'javamail'
    all*.exclude group: 'javax.mail', module: 'mail'
    all*.exclude group: 'org.glassfish.hk2.external'
    all*.exclude group: 'xalan', module: 'xalan'
    all*.exclude group: 'net.sf.saxon', module: 'saxon'
    all*.exclude group: 'org.codehaus.woodstox'
    all*.exclude group: 'org.eclipse.jetty.orbit', module: 'javax.mail.glassfish'
    all*.exclude group: 'javax.el', module: 'javax.el-api'
    all*.exclude group: 'org.hibernate', module: 'hibernate-validator'
    // INTERLOK-3197 exclude old javax.mail
    all*.exclude group: 'com.sun.mail', module: 'javax.mail'
    all*.exclude group: 'javax.validation', module: 'validation-api'
    all*.exclude group: 'javax.activation', module: 'activation'
    all*.exclude group: 'javax.activation', module: 'javax.activation-api'
  }

  dependencies {
    mavenDeploy ("org.apache.maven.wagon:wagon-http:3.4.0")
  }

  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
  }


  if (jacocoEnabled(subproject)) {
    jacocoTestReport {
      reports {
        xml.enabled true
        html.enabled true
      }
    }
    check.dependsOn jacocoTestReport
  }

  sourceSets {
    main {
      output.dir(versionDir, builtBy: 'generateVersion')
    }
  }

  // Generate the META-INF/adaptris-version file
  task generateVersion {
    doLast {
      def versionFile = new File(new File(versionDir, 'META-INF'), 'adaptris-version')
      versionFile.getParentFile().mkdirs()
      ant.propertyfile(file: versionFile) {
        entry(key: 'component.name', value: componentName)
        entry(key: 'build.version', value: project.version)
        entry(key: 'groupId', value: project.group)
        entry(key: 'artifactId', value: project.name)
        entry(key: 'build.date', value: new Date().format('yyyy-MM-dd'))
        entry(key: 'build.info', value: buildInfo())
      }
    }
  }

  jar {
    manifest {
      attributes("Built-By": System.getProperty('user.name'),
               "Build-Jdk": System.getProperty('java.version'),
               "Implementation-Title": componentName,
               "Implementation-Version": project.version,
               "Implementation-Vendor-Id": project.group,
               "Implementation-Vendor": organizationName)
    }
  }

  spotbugsMain {
    effort = "max"
    reportLevel = "high"
    // showProgress = "true"
    effort = "max"
    // Ignore failures?
    // ignoreFailures = false
    reports {
      xml {
        enabled = false
      }
      html {
        enabled = true
      }
    }
    includeFilter = new File("$rootDir/gradle/spotbugs-filter.xml")
    excludeFilter = new File("$rootDir/gradle/spotbugs-exclude.xml")
  }

  // disable spotbugsTests which checks our test code..
  spotbugsTest.enabled = false



  dependencyCheck  {
    suppressionFiles= [ "$rootDir/gradle/owasp-exclude.xml" ]
    skipConfigurations = [ "antSql" ]
  }

}
