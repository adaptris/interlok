plugins {
  // Manage optional dependencies in maven pom.
  id 'nebula.optional-base' version '7.0.0' apply false
  id 'com.github.spotbugs' version '5.1.3' apply false
  id "org.sonarqube" version '4.3.0.3225' apply false
  id 'org.owasp.dependencycheck' version '8.2.1' apply false
  id "io.freefair.lombok" version "6.5.1" apply false
  // id 'org.kordamp.gradle.jdeps' version '0.12.0' apply false
  id "org.gradle.test-retry" version "1.5.4" apply false
  id 'org.barfuin.gradle.taskinfo' version '1.4.0'
}

ext {
  interlokCoreVersion = project.hasProperty('interlokCoreVersion') ? project.getProperty('interlokCoreVersion') : '4.9-SNAPSHOT'
  releaseVersion = project.hasProperty('releaseVersion') ? project.getProperty('releaseVersion') : '4.9-SNAPSHOT'
  nexusBaseUrl = project.hasProperty('nexusBaseUrl') ? project.getProperty('nexusBaseUrl') : 'https://nexus.adaptris.net/nexus'
  mavenPublishUrl = project.hasProperty('mavenPublishUrl') ? project.getProperty('mavenPublishUrl') : nexusBaseUrl + '/content/repositories/snapshots'
  javadocsBaseUrl = nexusBaseUrl + "/content/sites/javadocs/com/adaptris"
  repoUsername = project.hasProperty('repoUsername') ? project.getProperty('repoUsername') : 'unknown'
  repoPassword = project.hasProperty('repoPassword') ? project.getProperty('repoPassword') : 'unknown'
  defaultNexusRepo = project.hasProperty('defaultNexusRepo') ? project.getProperty('defaultNexusRepo') : 'https://repo1.maven.org/maven2/'

  interlokJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : javadocsBaseUrl + "/interlok-core/" + interlokCoreVersion
  interlokCommonJavadocs= project.hasProperty('interlokCommonJavadocs') ? project.getProperty('interlokCommonJavadocs') : javadocsBaseUrl + "/interlok-common/" + interlokCoreVersion
  componentName='Interlok'
  organizationName = "Adaptris Ltd"
  organizationUrl = "http://interlok.adaptris.net"
}

ext.buildDetails = [
  jacocoEnabled: { subproject ->
    return !subproject.name.equals("interlok-core-apt") && !subproject.name.equals("interlok-stubs")
  },

  gitBranchNameOrTimestamp: { branchName ->
    if (branchName.equals("HEAD") || branchName.equals("develop") || branchName.startsWith("release")) {
      return new Date().format('HH:mm:ss z');
    }
    return branchName;
  },

  buildInfo: { ->
   new ByteArrayOutputStream().withStream { os ->
      exec {
        executable = "git"
        args = ["rev-parse", "--abbrev-ref", "HEAD"]
        standardOutput = os
      }
      def branchName = os.toString().replaceAll("\r", "").replaceAll("\n", "").trim();
      return buildDetails.gitBranchNameOrTimestamp(branchName);
    }
  },

  is_ci_pipeline: { ->
    return System.getenv().containsKey("CI");
  }
]

task clean(type: Delete) {
  delete project.buildDir
}

allprojects {
  tasks.withType(Jar) {
    metaInf {
      from ("$rootDir") {
        include 'LICENSE*'
        include 'NOTICE*'
      }
    }
  }
  tasks.withType(GenerateModuleMetadata) {
    enabled = false
  }
}

subprojects { subproject ->
  apply plugin: 'java-library'
  apply plugin: 'maven-publish'
  apply plugin: 'nebula.optional-base'
  apply plugin: 'com.github.spotbugs'
  apply plugin: 'org.sonarqube'
  apply plugin: 'org.owasp.dependencycheck'
  apply plugin: 'io.freefair.lombok'
  // apply plugin: 'org.kordamp.gradle.jdeps'
  apply plugin: 'org.gradle.test-retry'

  if (buildDetails.jacocoEnabled(subproject)) {
    apply plugin: "jacoco"
  }

  java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
  }

  group   = 'com.adaptris'
  version = releaseVersion
  def versionDir = "$buildDir/version"
  lombok.disableConfig = true

  repositories {
    mavenCentral()
    maven {
      url "$defaultNexusRepo"
      allowInsecureProtocol true
    }
    maven { url "$nexusBaseUrl/content/groups/public" }
    maven { url "$nexusBaseUrl/content/groups/interlok" }
  }

  configurations {
    javadoc {}
    mavenDeploy{}
    all*.exclude group: 'c3p0'
    all*.exclude group: 'commons-logging'
    all*.exclude group: 'javamail'
    all*.exclude group: 'javax.mail', module: 'mail'
    all*.exclude group: 'org.glassfish.hk2.external'
    all*.exclude group: 'xalan', module: 'xalan'
    all*.exclude group: 'net.sf.saxon', module: 'saxon'
    all*.exclude group: 'org.codehaus.woodstox'
    all*.exclude group: 'org.eclipse.jetty.orbit', module: 'javax.mail.glassfish'
    all*.exclude group: 'javax.el', module: 'javax.el-api'
    all*.exclude group: 'org.hibernate', module: 'hibernate-validator'
    // INTERLOK-3197 exclude old javax.mail
    all*.exclude group: 'com.sun.mail', module: 'javax.mail'
    all*.exclude group: 'javax.validation', module: 'validation-api'
    all*.exclude group: 'javax.activation', module: 'activation'
    all*.exclude group: 'javax.activation', module: 'javax.activation-api'

    // INTERLOK-3740 switch from jcraft to com.github.mwiede jsch fork.
    all*.exclude group: 'com.jcraft', module: 'jsch'

    // module exclusions for java 11.
    if (JavaVersion.current().ordinal() >= JavaVersion.VERSION_1_9.ordinal()) {
      all*.exclude group: "xml-apis", module: "xml-apis"
      all*.exclude group: "stax", module: "stax-api"
      all*.exclude group: "org.apache.geronimo.specs", module: "geronimo-jta_1.1_spec"
    }

  }

  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
  }


  if (buildDetails.jacocoEnabled(subproject)) {
    jacocoTestReport {
      reports {
        xml.required= true
        html.required= true
      }
      // Build the report ignoring the generating files
      // This need to be mirrored in any code-coverage config, probably
      // copy stuff from .codecov.yml
      afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
          fileTree(dir: it, exclude: [
            "**/adaptris/test/**/",
            "**/test/**/",
            "**/com/adaptris/logging/jmx/**",
            "**/com/adaptris/logging/log4j2/*JmxLogAppender*",
            "**/com/adaptris/taglet/**/"
          ])
        }))
      }
    }
    check.dependsOn jacocoTestReport
  }

  def generateVersionFile = tasks.register('generateVersionFile', WriteProperties) {
    group = 'Build'
    description = 'Generate Interlok version information'
    outputFile file('src/main/resources/META-INF/adaptris-version')
    property 'component.name', componentName
    property 'component.description', componentDesc
    property 'build.version', project.version
    property 'groupId', project.group
    property 'artifactId', project.name
    property 'build.date', new Date().format('yyyy-MM-dd')
    property 'build.info', buildDetails.buildInfo()
  }

  jar {
    manifest {
      attributes("Built-By": System.getProperty('user.name'),
               "Build-Jdk": System.getProperty('java.version'),
               "Implementation-Title": componentName,
               "Implementation-Version": project.version,
               "Implementation-Vendor-Id": project.group,
               "Implementation-Vendor": organizationName)
    }
  }


  task lgtmCompile(type: JavaCompile, dependsOn: delombok) {
    group 'Build'
    description 'Compile for lgtm'

    source = sourceSets.main.extensions.delombokTask
    destinationDirectory= sourceSets.main.java.classesDirectory
    classpath = project.sourceSets.main.compileClasspath
  }

  spotbugsMain {
    effort = "max"
    reportLevel = "high"
    reports {
      xml {
        required.set(false)
      }
      html {
        required.set(true)
        stylesheet = 'default.xsl'
      }
    }
    includeFilter = new File("$rootDir/gradle/spotbugs-filter.xml")
    excludeFilter = new File("$rootDir/gradle/spotbugs-exclude.xml")
  }

  // disable spotbugsTests which checks our test code..
  spotbugsTest.enabled = false

  dependencyCheck  {
    suppressionFiles= [ "$rootDir/gradle/owasp-exclude.xml" ]
    scanConfigurations = ["api", "compileClasspath", "runtimeClasspath"]
    // skipConfigurations = [ "mavenDeploy", "antSql", "spotbugs", "umlDoclet", "offlineJavadocPackages", "javadoc", "jacocoAnt", "jacocoAgent", "spotbugsPlugins", "spotbugsSlf4j" ]
    formats = [ "HTML", "JUNIT" ]
    junitFailOnCVSS = 7.0
    failBuildOnCVSS = 7.0
    analyzers {
      assemblyEnabled=false
      knownExploitedURL=project.findProperty('dependencyCheckKnownExploitedURL')
    }
  }

  processResources.dependsOn generateVersionFile
}
