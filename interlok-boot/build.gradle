ext {
  componentName='Interlok Core/Bootstrap'
  componentDesc="Wrapper around spring-boot-loader using PropertyLauncher to bootrap Interlok"
  springBootLoaderVersion='2.7.12'
  delombokTargetDir = new File("${project.projectDir}/src/main/generated")
}

configurations {
  bundled{}
}

dependencies {
  bundled "org.springframework.boot:spring-boot-loader:$springBootLoaderVersion"
  compileOnly "org.springframework.boot:spring-boot-loader:$springBootLoaderVersion"
  annotationProcessor project(':interlok-core-apt')
  javadoc project(':interlok-core-apt')
  testImplementation "org.junit.jupiter:junit-jupiter-api:5.9.2"
  testImplementation "org.junit.jupiter:junit-jupiter-engine:5.9.2"
  testRuntimeOnly "org.springframework.boot:spring-boot-loader:$springBootLoaderVersion"
  testCompileOnly "org.springframework.boot:spring-boot-loader:$springBootLoaderVersion"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

task unzipSpringBoot(type: Copy) {
  from zipTree(configurations.bundled.singleFile)
  into "$project.buildDir/spring-boot-loader"
}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Build-Jdk": System.getProperty('java.version'),
               "Implementation-Title": componentName,
               "Implementation-Version": project.version,
               "Implementation-Vendor-Id": project.group,
               "Implementation-Vendor": organizationName,
			   "Add-Opens": "java.base/java.lang java.base/java.util",
               "Main-Class": "com.adaptris.interlok.boot.InterlokLauncher")
  }
  from ("$project.buildDir/spring-boot-loader") {
    exclude 'META-INF/MANIFEST.MF'
  }
}

javadoc {
  configure(options) {
    taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
    options.tags('apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:','implNote:a:Implementation Note:')
    options.addStringOption "tagletpath", configurations.javadoc.asPath
    options.addStringOption('Xdoclint:none', '-quiet')
    title= componentName
  }
  classpath += configurations.bundled
}

task deleteGeneratedFiles(type: Delete) {
  delete delombokTargetDir
}

delombok {
  target = delombokTargetDir
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }
      artifact sourcesJar { classifier "sources" }
      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", componentDesc)
        asNode().appendNode("url", "https://interlok.adaptris.net/interlok-docs/#/")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.8.0+")
        properties.appendNode("license", "false")
        properties.appendNode("readme", "https://github.com/adaptris/interlok/raw/develop/README.md")
        properties.appendNode("repository", "https://github.com/adaptris/interlok")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

jar.dependsOn unzipSpringBoot
clean.dependsOn deleteGeneratedFiles
