ext {
  componentName="Interlok Core/Common"
  componentDesc="Common components for Interlok"

  delombokTargetDir = new File("${project.projectDir}/src/main/generated")
  slf4jVersion = "2.0.13"
  log4j2Version = "2.23.1"
  mockitoVersion = "4.9.0"
  jettyVersion= "10.0.22"
}

// In this section you declare the dependencies for your production and test code
dependencies {

  api project(':interlok-core-apt')
  api ("com.thoughtworks.xstream:xstream:1.4.20")
  api ("commons-io:commons-io:2.16.1")
  api ("commons-net:commons-net:3.11.1")
  api ("commons-pool:commons-pool:1.6")
  api ("org.apache.commons:commons-lang3:3.15.0")
  api ("org.apache.commons:commons-pool2:2.12.0")

  api ("org.slf4j:slf4j-api:$slf4jVersion")
  api ("javax.servlet:javax.servlet-api:4.0.1")

  api ("org.eclipse.jetty:jetty-alpn-client:$jettyVersion")
  api ("org.eclipse.jetty:jetty-alpn-java-client:$jettyVersion")
  api ("org.eclipse.jetty:jetty-alpn-server:$jettyVersion")
  api ("org.eclipse.jetty:jetty-alpn-java-server:$jettyVersion")
  api ("org.eclipse.jetty:jetty-annotations:$jettyVersion")
  api ("org.eclipse.jetty:jetty-client:$jettyVersion")
  api ("org.eclipse.jetty:jetty-deploy:$jettyVersion")
  api ("org.eclipse.jetty:jetty-http:$jettyVersion") // implicit dependency
  api ("org.eclipse.jetty:jetty-io:$jettyVersion") // implicit dependency
  api ("org.eclipse.jetty:jetty-jaspi:$jettyVersion")
  api ("org.eclipse.jetty:jetty-jmx:$jettyVersion")
  api ("org.eclipse.jetty:jetty-jndi:$jettyVersion")
  api ("org.eclipse.jetty:jetty-plus:$jettyVersion")
  api ("org.eclipse.jetty:jetty-quickstart:$jettyVersion")
  api ("org.eclipse.jetty:jetty-rewrite:$jettyVersion")
  api ("org.eclipse.jetty:jetty-security:$jettyVersion") // implicit dependency
  api ("org.eclipse.jetty:jetty-server:$jettyVersion") // implicit dependency
  api ("org.eclipse.jetty:jetty-servlet:$jettyVersion")
  api ("org.eclipse.jetty:jetty-servlets:$jettyVersion")
  api ("org.eclipse.jetty:jetty-util-ajax:$jettyVersion")
  api ("org.eclipse.jetty:jetty-util:$jettyVersion") // implicit dependency
  api ("org.eclipse.jetty:jetty-webapp:$jettyVersion")
  api ("org.eclipse.jetty:jetty-xml:$jettyVersion")
  api ("org.eclipse.jetty.http2:http2-hpack:$jettyVersion") // implicit dependency
  api ("org.eclipse.jetty.http2:http2-common:$jettyVersion")
  api ("org.eclipse.jetty.http2:http2-server:$jettyVersion")
  api ("org.eclipse.jetty.http2:http2-client:$jettyVersion")
  api ("org.eclipse.jetty.websocket:websocket-javax-server:$jettyVersion")
  api ("org.eclipse.jetty.websocket:websocket-javax-client:$jettyVersion")

  implementation "org.apache.logging.log4j:log4j-api:$log4j2Version", optional
  implementation "org.apache.logging.log4j:log4j-core:$log4j2Version", optional
  implementation "org.apache.logging.log4j:log4j-slf4j2-impl:$log4j2Version", optional
  implementation "org.apache.logging.log4j:log4j-1.2-api:$log4j2Version", optional
  implementation "org.slf4j:jul-to-slf4j:$slf4jVersion", optional
  implementation "org.slf4j:jcl-over-slf4j:$slf4jVersion", optional

  annotationProcessor project(':interlok-core-apt')
  testAnnotationProcessor project(':interlok-core-apt')

  javadoc project(':interlok-core-apt')

  testImplementation ("org.junit.jupiter:junit-jupiter-api:5.10.3")
  testImplementation ("org.junit.jupiter:junit-jupiter-engine:5.10.3")
  testImplementation ("org.mockito:mockito-core:$mockitoVersion")
  testImplementation ("org.mockito:mockito-inline:$mockitoVersion")
  testImplementation ("org.awaitility:awaitility:4.2.1")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives sourcesJar
}


javadoc {
  configure(options) {
    taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
    options.addStringOption "Xdoclint:none", "-quiet"
    options.addStringOption "tagletpath", configurations.javadoc.asPath
    options.tags('apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:','implNote:a:Implementation Note:')
    title= componentName
  }
}

delombok {
  target = delombokTargetDir
}

task deleteGeneratedFiles(type: Delete) {
  delete delombokTargetDir
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }
      artifact sourcesJar { classifier "sources" }

      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", componentDesc)
        asNode().appendNode("url", "https://interlok.adaptris.net/interlok-docs/#/")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.8.0+")
        properties.appendNode("license", "false")
        properties.appendNode("readme", "https://github.com/adaptris/interlok/raw/develop/README.md")
        properties.appendNode("repository", "https://github.com/adaptris/interlok")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}


clean.dependsOn deleteGeneratedFiles
