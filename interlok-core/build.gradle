import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.*

ext {
  componentName='Interlok Core/Base'
  componentDesc="The Core Interlok framework component; this is your must have"
  activeMqVersion='5.16.1'
  bouncyCastleVersion='1.68'
  mysqlDriverVersion='8.0.23'
  slf4jVersion = '1.7.30'
  mockitoVersion = '3.8.0'
  jschVersion = '0.1.62'

  verboseTests= project.hasProperty('verboseTests') ? project.getProperty('verboseTests') : "false"
  classesToTest = project.hasProperty("junit.test.classes") ? project.getProperty("junit.test.classes") : "**/*Test*"
  maxThreads = project.hasProperty("junit.threads") ? project.getProperty("junit.threads") : 1
  interlokCommonsOfflineJavadocDir = project.rootDir.getCanonicalPath() + "/interlok-common/build/docs/javadoc"
  delombokTargetDir = new File("${project.projectDir}/src/main/generated")

  unitTestStubsIncludes = [ '**/core/BaseCase*', '**/core/Example*',  '**/core/PortManager*', '**/core/ProducerCase*', '**/core/ConsumerCase*', '**/core/ServiceCase*',
                         '**/core/ServiceCollection*', '**/core/MarshallingBaseCase*' ,'**/core/jms/JmsConsumerCase*', '**/core/jms/JmsProducerCase*',
                         '**/core/jms/JmsProducerExample*','**/core/jms/MockJmsConnectionErrorHandler*',   '**/core/jms/MessageTypeTranslatorCase*',
                         '**/core/jms/JmsConfig*', '**/core/jms/MockProducer*', '**/core/jms/**/JndiImplementationCase*',
                         '**/core/jms/ActiveJmsConnectionErrorHandlerCase*', '**/core/transform/TransformServiceExample*',
                         '**/core/services/cache/*Example*', '**/core/services/mime/MimeJunitHelper*', '**/core/jdbc/JdbcServiceCase*',
                         '**/core/jdbc/DatabaseConnectionCase*', '**/stubs/**', '**/scaffolding/**', '**/util/system/*', '**/META-INF/**']

}

ext.hostname = { ->
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    return System.getenv("COMPUTERNAME")
  }
  return System.getenv("HOSTNAME")
}

def propertyTemplate(dir, filename) {
  def file = new File(dir, filename + "." + hostname())
  if (file.exists()) {
    return file.getName()
  }
  return filename
}

ext.testResourcesDir = { ->
  return "${project.projectDir}/src/test/resources".replaceAll("\\\\", "/")
}

ext.verboseTestLogging = { ->
  return verboseTests.equals("true")
}

configurations {
  unitTestStubs{}
  antSql{}
}

// In this section you declare the dependencies for your production and test code
dependencies {

  compile project(':interlok-core-apt')
  compile project(':interlok-common')

  compile ("com.thoughtworks.xstream:xstream:1.4.16")
  compile ("org.codehaus.jettison:jettison:1.2")
  compile ("io.github.classgraph:classgraph:4.8.104")
  compile ("net.jodah:expiringmap:0.5.9")
  compile ("com.sun.activation:jakarta.activation:1.2.2")
  compile ("org.apache.activemq:activemq-client:$activeMqVersion") {
    exclude group: "org.apache.geronimo.specs", module: "geronimo-jms_1.1_spec"
  }
  compile ("org.apache.geronimo.specs:geronimo-jms_2.0_spec:1.0-alpha-2")
  compile ("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final")
  compile ("jakarta.validation:jakarta.validation-api:2.0.2")
  compile ("org.hibernate.validator:hibernate-validator:6.1.6.Final")
  compile ("org.glassfish:javax.el:3.0.1-b12")
  compile ("commons-io:commons-io:2.8.0")
  compile ("org.apache.commons:commons-lang3:3.12.0")
  compile ("commons-net:commons-net:3.8.0")
  compile ("org.apache.commons:commons-pool2:2.9.0")
  compile ("org.apache.commons:commons-exec:1.3")
  compile ("org.apache.commons:commons-text:1.9")
  compile ("org.apache.commons:commons-collections4:4.4")
  compile ("org.bouncycastle:bcprov-jdk15on:$bouncyCastleVersion")
  compile ("org.bouncycastle:bcpkix-jdk15on:$bouncyCastleVersion")
  compile ("org.bouncycastle:bcmail-jdk15on:$bouncyCastleVersion")
  compile ("com.sun.mail:jakarta.mail:1.6.5")
  compile ("org.glassfish.external:opendmk_jmxremote_optional_jar:1.0-b01-ea")
  compile ("org.glassfish.external:opendmk_jdmkrt_jar:1.0-b01-ea")
  compile ("com.github.mwiede:jsch:$jschVersion")
  compile ("org.eclipse.jetty.aggregate:jetty-all:9.4.38.v20210224")
  compile ("javax.servlet:javax.servlet-api:4.0.1")
  compile ("net.sf.joost:joost:0.9.1")
  compile ("org.quartz-scheduler:quartz:2.3.2") {
    exclude group: "com.zaxxer", module: "HikariCP-java7"
  }
  compile ("com.zaxxer:HikariCP:4.0.3")
  compile ("net.sf.saxon:Saxon-HE:10.3")
  compile ("xerces:xercesImpl:2.12.1")
  compile ("com.mchange:c3p0:0.9.5.5")
  compile ("org.apache.derby:derby:10.15.2.0")
  compile ("org.apache.derby:derbytools:10.15.2.0")
  compile ("org.apache-extras.beanshell:bsh:2.0b6")
  compile ("javax:javaee-api:8.0.1")

  compile ("org.slf4j:slf4j-api:1.7.30")

  testCompile ("junit:junit:4.13.2")
  testCompile ("org.apache.activemq:artemis-jms-server:2.17.0")
  testCompile ("oro:oro:2.0.8")

  testCompile ("org.awaitility:awaitility:4.0.3")

  testCompile ("org.apache.activemq:activemq-broker:$activeMqVersion")
  testCompile ("org.apache.activemq:activemq-jaas:$activeMqVersion")
  testCompile ("org.apache.activemq:activemq-kahadb-store:$activeMqVersion")
  testCompile ("org.apache.activemq.protobuf:activemq-protobuf:1.1")

  testCompile ("org.jruby:jruby-complete:9.2.16.0")
  testCompile ("org.mockftpserver:MockFtpServer:2.8.0")
  testCompile ("org.mockito:mockito-core:$mockitoVersion")
  testCompile ("org.mockito:mockito-inline:$mockitoVersion")
  testCompile("net.sourceforge.jtds:jtds:1.3.1")
  testCompile("com.microsoft.sqlserver:mssql-jdbc:6.4.0.jre8")
  testCompile ("mysql:mysql-connector-java:$mysqlDriverVersion")

  antSql("net.sourceforge.jtds:jtds:1.3.1")
  antSql("com.microsoft.sqlserver:mssql-jdbc:6.4.0.jre8")
  antSql ("mysql:mysql-connector-java:$mysqlDriverVersion")

  annotationProcessor project(':interlok-core-apt')
  testAnnotationProcessor project(':interlok-core-apt')

  javadoc project(':interlok-core-apt')

}


task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task examplesJar(type: Jar, dependsOn: test) {
  classifier = 'examples'
  from new File(buildDir, '/examples')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.extensions.delombokTask
}

task unitTestStubsJar(type: Jar, dependsOn: compileTestJava) {
  from sourceSets.test.output
  baseName "interlok-stubs"
  includeEmptyDirs false
  include unitTestStubsIncludes
}

task unitTestStubsSourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.test.allSource
  baseName "interlok-stubs"
  includeEmptyDirs false
  include unitTestStubsIncludes
}

task generateUnitTestProperties {
  doLast {
    ant.property(file: project.projectDir.getCanonicalPath() + "/" + "build.properties")
    ant.property(file: testResourcesDir() + "/" + propertyTemplate(testResourcesDir(), "default-test.properties.template"))
    ant.property(file:  testResourcesDir() + "/" + propertyTemplate(testResourcesDir(), "unit-tests.properties.template"))
    ant.echoproperties(destfile:  testResourcesDir() + '/unit-tests.properties.resolved', prefix: "junit.")
    ant.replace(file:  testResourcesDir() + '/unit-tests.properties.resolved', token:"junit.", value: "")
    // Generate the security.properties file containing the private key for legacy things.
    ant.propertyfile(file: testResourcesDir() + "/security.properties", comment: "Legacy private key password") {
      entry(key: 'adaptris.privatekey.password', value: ant.properties['junit.security.password'])
    }
    ant.property(file: testResourcesDir() + "/" + propertyTemplate(testResourcesDir(), "security-test.properties.template"))
    ant.echoproperties(destfile: testResourcesDir() + '/security-test.properties.resolved', prefix: "junitsecurity.")
    ant.replace(file:  testResourcesDir() + '/security-test.properties.resolved', token:"junitsecurity.", value: "")
  }
}

task copyUnitTestProperties(type: Copy, dependsOn: generateUnitTestProperties) {
  delete file( testResourcesDir() + '/unit-tests.properties')
  from file( testResourcesDir() + "/unit-tests.properties.resolved")
  into (testResourcesDir())
  rename { String fileName ->
    fileName.replace("unit-tests.properties.resolved", 'unit-tests.properties')
  }
  filter(ReplaceTokens, tokens: [JAVA_HOME: System.getProperty("java.home").replaceAll("\\\\", "/")])
  filter(ReplaceTokens, tokens: [BASE_DIR: project.projectDir.getCanonicalPath().replaceAll("\\\\", "/")])
  filter(ReplaceTokens, tokens: [BUILD_DIR: project.buildDir.getCanonicalPath().replaceAll("\\\\", "/")])
}

task copySecurityTestProperties(type: Copy, dependsOn: generateUnitTestProperties) {
  delete file(testResourcesDir() + '/security-test.properties')
  from file(testResourcesDir() + "/security-test.properties.resolved")
  into (testResourcesDir())
  rename { String fileName ->
    fileName.replace("security-test.properties.resolved", 'security-test.properties')
  }
  filter(ReplaceTokens, tokens: [JAVA_HOME: System.getProperty("java.home").replaceAll("\\\\", "/")])
  filter(ReplaceTokens, tokens: [BASE_DIR: project.projectDir.getCanonicalPath().replaceAll("\\\\", "/")])
  filter(ReplaceTokens, tokens: [BUILD_DIR: project.buildDir.getCanonicalPath().replaceAll("\\\\", "/")])
}

task prepareForTests(dependsOn: [copySecurityTestProperties, copyUnitTestProperties]) {
  doLast {
    // unit tests are enabled.
    if ("true".equalsIgnoreCase(ant.properties["default.jdbc.storedproc.tests.enabled"])) {
        // Drop and re-create the database
      ant.sql(driver: ant.properties["default.jdbc.storedproc.driver"],
            url: ant.properties["default.jdbc.storedproc.url"]  + ant.properties["default.jdbc.storedproc.url.params"],
            userid: ant.properties["default.jdbc.storedproc.username"],
            password: ant.properties["default.jdbc.storedproc.password"],
            onerror: "continue", print: "false",
            classpath: configurations.antSql.asPath) {
        transaction("drop database " + ant.properties['default.jdbc.storedproc.database'])
        transaction("create database " + ant.properties['default.jdbc.storedproc.database'])
      }
      // Do the SQL.
      ant.sql(driver: ant.properties["default.jdbc.storedproc.driver"],
            url: ant.properties["default.jdbc.storedproc.url"] + ant.properties["default.jdbc.storedproc.database"] + ant.properties["default.jdbc.storedproc.url.params"],
            userid: ant.properties["default.jdbc.storedproc.username"],
            password: ant.properties["default.jdbc.storedproc.password"],
            onerror: "continue", print: "false", delimiter: "#",
            classpath: configurations.antSql.asPath) {
        transaction(src: testResourcesDir() + "/jdbc/" + ant.properties["default.jdbc.storedproc.vendor"] + "_create_data_for_procedures_tests.sql")
      }

      // Now rewrite unit-tests.properties so that we have the JDBC URL correct.
      if ("mysql".equalsIgnoreCase(ant.properties["default.jdbc.storedproc.vendor"])) {
        ant.propertyfile(file: testResourcesDir() + "/unit-tests.properties") {
          entry(key: 'jdbc.storedproc.url', value: ant.properties["default.jdbc.storedproc.url"]
              + ant.properties["default.jdbc.storedproc.database"]
              + ant.properties["default.jdbc.storedproc.url.params"]
              + "&user=" + ant.properties["default.jdbc.storedproc.username"]
              + "&password=" + ant.properties["default.jdbc.storedproc.password"])
        }
      } else if ("sqlserver".equalsIgnoreCase(ant.properties["default.jdbc.storedproc.vendor"])) {
        ant.propertyfile(file: testResourcesDir() + "/unit-tests.properties") {
          entry(key: 'jdbc.storedproc.url', value: ant.properties["default.jdbc.storedproc.url"]+ant.properties["default.jdbc.storedproc.database"] )
        }
      } else {
        ant.fail('Unsupported Jdbc Vendor')
      }
    }
  }
}


task deleteGeneratedFiles(type: Delete) {
  delete file(testResourcesDir() + '/unit-tests.properties')
  delete file(testResourcesDir() + '/unit-tests.properties.resolved')
  delete file(testResourcesDir() + '/security-test.properties')
  delete file(testResourcesDir() + '/security-test.properties.resolved')
  delete file(testResourcesDir() + '/security.properties')
  delete file('derby.log')
  delete 'activemq-data'
  delete delombokTargetDir
}


artifacts {
  archives javadocJar
  archives examplesJar
  archives sourcesJar
  unitTestStubs unitTestStubsJar
  unitTestStubs unitTestStubsSourcesJar
}

javadoc {
  configure(options) {
    options.linksOffline(interlokCommonJavadocs, interlokCommonsOfflineJavadocDir)

    taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
    options.addStringOption "tagletpath", configurations.javadoc.asPath
    options.addBooleanOption "-no-module-directories", true
    options.tags('apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:','implNote:a:Implementation Note:')
    options.
      group ("Base Adapter Configuration", ["com.adaptris.core.*" , "com.adaptris.core"]).
      group ("Standard Services", ["com.adaptris.core.services.*" , "com.adaptris.core.services"]).
      group ("Data Transformation and Validation", ["com.adaptris.core.transform.*" , "com.adaptris.core.transform", "com.adaptris.transform*", "com.adaptris.edi*"]).
      group ("Generic Filesystem", ["com.adaptris.core.fs.*" , "com.adaptris.core.fs","com.adaptris.fs", "com.adaptris.fs.*"]).
      group ("Connecting to JMS", ["com.adaptris.core.jms.*" , "com.adaptris.core.jms"]).
      group ("Email", ["com.adaptris.core.mail.*" , "com.adaptris.core.mail","com.adaptris.mail", "com.adaptris.mail.*"]).
      group ("FTP / SFTP", ["com.adaptris.core.ftp", "com.adaptris.core.ftp.*", "com.adaptris.filetransfer", "com.adaptris.filetransfer.*", "com.adaptris.ftp", "com.adaptris.ftp.*", "com.adaptris.sftp", "com.adaptris.sftp.*"]).
      group ("HTTP", ["com.adaptris.core.http", "com.adaptris.core.http.*", "com.adaptris.http", "com.adaptris.http.*"]).
      group ("Caching", ["com.adaptris.core.cache", "com.adaptris.core.cache.*", "com.adaptris.core.services.cache", "com.adaptris.core.services.cache.*"]).
      group ("JDBC", ["com.adaptris.core.jdbc", "com.adaptris.core.jdbc.*", "com.adaptris.core.services.jdbc", "com.adaptris.core.services.jdbc.*", "com.adaptris.jdbc", "com.adaptris.jdbc.*"]).
      group ("Security", ["com.adaptris.core.security", "com.adaptris.core.security.*", "com.adaptris.security", "com.adaptris.security.*"]).
      group ("Utility Classes", ["com.adaptris.util", "com.adaptris.util.*", "com.adaptris.core.util", "com.adaptris.core.util.*"]).
      group ("Adapter Management", ["com.adaptris.core.management", "com.adaptris.core.management.*", "com.adaptris.failover", "com.adaptris.core.runtime", "com.adadptris.core.runtime.*"])
    title= componentName
  }
}

test {
  include classesToTest
  maxHeapSize = "1G"
  maxParallelForks = maxThreads
  // listen to events in the test execution lifecycle
  beforeSuite { descriptor ->
     if (verboseTestLogging()) {
      logger.lifecycle("Running: " + descriptor)
     }
  }
  if (buildDetails.is_ci_pipeline()) {
    retry {
      maxRetries = 3
      maxFailures = 20
    }
  }
}

uploadArchives {
  repositories {
    mavenDeployer {
      repository(url: mavenPublishUrl) {
        authentication(userName: repoUsername, password: repoPassword)
      }
      configuration = configurations.mavenDeploy
      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", componentDesc)
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.8.0+")
        properties.appendNode("license", "false")
        properties.appendNode("url", "https://interlok.adaptris.net/interlok-docs/#/")
        properties.appendNode("readme", "https://github.com/adaptris/interlok/raw/develop/README.md")
        properties.appendNode("repository", "https://github.com/adaptris/interlok")
      }

    }
  }
}

uploadUnitTestStubs {
  repositories {
    mavenDeployer {
      repository(url: mavenPublishUrl) {
        authentication(userName: repoUsername, password: repoPassword)
      }
      configuration = configurations.mavenDeploy
      pom.artifactId = "interlok-stubs"
      pom.withXml {
        asNode().appendNode("name", "Interlok Test Scaffolding")
        asNode().appendNode("description", "Test Scaffolding for custom Interlok components; of no consequence at runtime")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.8.0+")
        properties.appendNode("tags", "junit")
        properties.appendNode("license", "false")
        properties.appendNode("developerOnly", "true")
        properties.appendNode("url", "https://interlok.adaptris.net/interlok-docs/#/")
        properties.appendNode("readme", "https://github.com/adaptris/interlok/raw/develop/README.md")
        properties.appendNode("repository", "https://github.com/adaptris/interlok")
      }

    }
  }
}

delombok {
  target = delombokTargetDir
}

check.dependsOn jacocoTestReport
publish.dependsOn uploadArchives,uploadUnitTestStubs
processTestResources.dependsOn prepareForTests
clean.dependsOn deleteGeneratedFiles
// javadoc.dependsOn offlinePackageList
