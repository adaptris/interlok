drop.sql = DROP TABLE retry_store

create.sql = CREATE TABLE retry_store (message_id VARCHAR(256) NOT NULL, acknowledge_id VARCHAR(256) NOT NULL, message BLOB NOT NULL, retry_interval INTEGER NOT NULL, total_retries INTEGER NOT NULL, retries_to_date INTEGER NOT NULL, marshalled_service BLOB NOT NULL, acknowledged CHAR NOT NULL, updated_on TIMESTAMP, inserted_on TIMESTAMP, CONSTRAINT pk_message_id PRIMARY KEY (message_id), CONSTRAINT idx_acknowledge_id UNIQUE (acknowledge_id))

insert.sql = INSERT INTO retry_store (message_id, acknowledge_id, message, retry_interval, total_retries, retries_to_date, marshalled_service, acknowledged, inserted_on, updated_on) VALUES (?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)

select.sql = SELECT * FROM retry_store WHERE message_id=?

acknowledge.sql = UPDATE retry_store SET acknowledged=?, updated_on=? WHERE acknowledge_id=?

update-retry.sql = UPDATE retry_store SET retries_to_date=(retries_to_date + 1), updated_on=? WHERE message_id=?

retry.sql = SELECT * FROM retry_store WHERE (acknowledged='F' AND (retries_to_date < total_retries OR total_retries = -1))

delete.acknowleged.sql = DELETE FROM retry_store WHERE acknowledged='T'

delete.sql = DELETE FROM retry_store WHERE message_id=?

select.expired.sql = SELECT * FROM retry_store WHERE (acknowledged='F' AND (retries_to_date >= total_retries AND total_retries != -1) AND {fn TIMESTAMPDIFF(SQL_TSI_SECOND, updated_on, CURRENT_TIMESTAMP)} >= (retry_interval / 1000)) 


